! Rank and shape definitions for simple templating
!
! Note that the ranks encode coneptual dimensions here, eg. FIELD_RB2D encodes
! a surface field and FIELD_RB3D represents a field with a vertical component.
#:include "field_definition.hypp"

MODULE FIELD_MODULE_DEF
  ! The FIELD types provided by this module provide data abstractions that
  ! decouple data storage in memory from the data views used in thread-parallel
  ! sections of the code. They are intended to thinly wrap ATLAS_FIELD
  ! objects and provide additional features that may later be
  ! incorporated into Atlas. They can also provide backward-compatibility
  ! for non-Atlas execution modes.

USE PARKIND1
USE OMP_LIB, ONLY: OMP_GET_MAX_THREADS, OMP_GET_THREAD_NUM
USE IEEE_ARITHMETIC, ONLY: IEEE_SIGNALING_NAN

IMPLICIT NONE

INTEGER (KIND=JPIM), PARAMETER :: NDEVFRESH = B'00000001', NHSTFRESH = B'00000010'
INTEGER (KIND=JPIM), PARAMETER, PRIVATE :: NH2D = 1, ND2H = 2, NRD = B'00000001', NWR = B'00000010'

TYPE GPU_STATS
  INTEGER :: TRANSFER_CPU_TO_GPU = 0
  INTEGER :: TRANSFER_GPU_TO_CPU = 0
  REAL :: TOTAL_TIME_TRANSFER_CPU_TO_GPU = 0
  REAL :: TOTAL_TIME_TRANSFER_GPU_TO_CPU = 0
  CONTAINS
  PROCEDURE :: INC_CPU_TO_GPU_TRANSFER
  PROCEDURE :: INC_GPU_TO_CPU_TRANSFER
END TYPE GPU_STATS

TYPE, ABSTRACT :: FIELD_BASIC
  ! Flag indicating the use a single block-buffer per thread
  LOGICAL :: THREAD_BUFFER = .FALSE.

  INTEGER(KIND=JPIM) :: ISTATUS = 0
  INTEGER(KIND=JPIM) :: LAST_CONTIGUOUS_DIMENSION = 0

  TYPE(GPU_STATS) :: STATS

CONTAINS
  PROCEDURE (SYNC), DEFERRED :: SYNC_HOST_RDWR
  PROCEDURE (SYNC), DEFERRED :: SYNC_HOST_RDONLY
  PROCEDURE (SYNC), DEFERRED :: SYNC_DEVICE_RDWR
  PROCEDURE (SYNC), DEFERRED :: SYNC_DEVICE_RDONLY
END TYPE FIELD_BASIC

ABSTRACT INTERFACE
  SUBROUTINE SYNC (SELF)
    IMPORT FIELD_BASIC
    CLASS(FIELD_BASIC), INTENT (INOUT) :: SELF
  END SUBROUTINE 
END INTERFACE


#:for dtype, suffix, rank, default in field_descriptors
#:set field_type_name = 'FIELD_%s%sD' % (suffix, rank)
TYPE, ABSTRACT, EXTENDS (FIELD_BASIC) :: ${field_type_name}$
  ! A FIELD encapsulates a single multi-dimensional array and can
  ! provide block-indexed "views" of the data for automating the
  ! allocation and parallel iterration of NPROMA blocks.

  ! TODO: Atlas-based field data storage field
  ! TODO: Do we still need to use pointers here?
  ! TYPE(ATLAS_FIELD), POINTER :: DATA

  ! Storage pointer for non-Atlas backward-compatibility mode
  !
  ! The underlying storage pointer has the rank as the dimension,
  ! where the innermost dimension represents the horizontal and
  ! the outermost one is the block index.
  ${dtype}$, POINTER :: PTR(${shapes[rank]}$) => NULL()

  ! A separate data pointer that can be used to create
  ! a contiguous chunk of host memory to cleanly map to
  ! device, should the %DATA pointer be discontiguous.
  ${dtype}$, POINTER, CONTIGUOUS :: DEVPTR(${shapes[rank]}$) => NULL()

CONTAINS

  PROCEDURE :: FINAL => ${field_type_name}$_FINAL
  PROCEDURE :: ${field_type_name}$_FINAL
  PROCEDURE :: DELETE_DEVICE => ${field_type_name}$_DELETE_DEVICE
  PROCEDURE :: GET_VIEW => ${field_type_name}$_GET_VIEW
  PROCEDURE :: GET_DEVICE_DATA_RDONLY => ${field_type_name}$_GET_DEVICE_DATA_RDONLY
  PROCEDURE :: GET_DEVICE_DATA_RDWR => ${field_type_name}$_GET_DEVICE_DATA_RDWR
  PROCEDURE :: GET_HOST_DATA_RDONLY => ${field_type_name}$_GET_HOST_DATA_RDONLY
  PROCEDURE :: GET_HOST_DATA_RDWR => ${field_type_name}$_GET_HOST_DATA_RDWR
  PROCEDURE :: SYNC_HOST_RDWR => ${field_type_name}$_SYNC_HOST_RDWR 
  PROCEDURE :: SYNC_HOST_RDONLY => ${field_type_name}$_SYNC_HOST_RDONLY
  PROCEDURE :: SYNC_DEVICE_RDWR => ${field_type_name}$_SYNC_DEVICE_RDWR
  PROCEDURE :: SYNC_DEVICE_RDONLY => ${field_type_name}$_SYNC_DEVICE_RDONLY

  PROCEDURE, PRIVATE :: GET_DEVICE_DATA => ${field_type_name}$_GET_DEVICE_DATA
  PROCEDURE, PRIVATE :: GET_HOST_DATA => ${field_type_name}$_GET_HOST_DATA
  PROCEDURE, PRIVATE :: COPY =>  ${field_type_name}$_COPY
END TYPE ${field_type_name}$

#:for dm in data_management_type
TYPE, EXTENDS(${field_type_name}$) :: ${field_type_name}$_${dm}$
CONTAINS
#:if dm == 'WRAPPER'
  PROCEDURE :: INIT => ${field_type_name}$_WRAP
#:else
  PROCEDURE :: INIT => ${field_type_name}$_ALLOCATE
#:endif
  PROCEDURE :: FINAL => ${field_type_name}$_${dm}$_FINAL
END TYPE ${field_type_name}$_${dm}$

#:endfor
TYPE ${field_type_name}$_PTR
  ! Struct to hold references to field objects
  CLASS(${field_type_name}$), POINTER :: PTR => NULL()
END TYPE ${field_type_name}$_PTR

TYPE ${field_type_name}$_VIEW
  ! Struct to hold array views, so we can make arrays of them
  ${dtype}$, POINTER :: P(${shapes[rank-1]}$) => NULL()
END TYPE ${field_type_name}$_VIEW

#:endfor

CONTAINS
!
! CLASS METHODS
!
#:for dtype, suffix, rank, default in field_descriptors
#:set field_type_name = 'FIELD_%s%sD' % (suffix, rank)
  SUBROUTINE ${field_type_name}$_WRAP(SELF, DATA, PERSISTENT, LBOUNDS)
    ! Create FIELD object by wrapping existing data
    CLASS(${field_type_name}$_WRAPPER), INTENT(INOUT) :: SELF
    ${dtype}$, TARGET, INTENT(IN) :: DATA(${shapes[rank]}$)
    LOGICAL, INTENT(IN), OPTIONAL :: PERSISTENT
    INTEGER(KIND=JPIM), INTENT(IN), OPTIONAL :: LBOUNDS(${rank}$)
    LOGICAL :: LLPERSISTENT

    LLPERSISTENT = .TRUE.
    IF (PRESENT (PERSISTENT)) LLPERSISTENT = PERSISTENT

    IF (PRESENT(LBOUNDS)) THEN
      SELF%PTR(${lbptr (rank)}$) => DATA
    ELSE
      SELF%PTR => DATA
    ENDIF
    SELF%THREAD_BUFFER = .NOT. LLPERSISTENT
    SELF%ISTATUS = NHSTFRESH

    IF (.NOT. LLPERSISTENT) THEN
      IF (OMP_GET_MAX_THREADS() /= SIZE (DATA, ${rank}$)) THEN
        CALL ABOR1 ('${field_type_name}$_WRAP: DIMENSION MISMATCH')
      ENDIF
    ENDIF

  END SUBROUTINE ${field_type_name}$_WRAP

  SUBROUTINE ${field_type_name}$_ALLOCATE (SELF, LBOUNDS, UBOUNDS, PERSISTENT)
    ! Create FIELD object by explicitly allocating new data
    CLASS(${field_type_name}$_OWNER) :: SELF
    INTEGER(KIND=JPIM), INTENT(IN) :: LBOUNDS(${rank}$)
    INTEGER(KIND=JPIM), INTENT(IN) :: UBOUNDS(${rank}$)
    LOGICAL, INTENT(IN), OPTIONAL :: PERSISTENT
    INTEGER(KIND=JPIM) :: REAL_LBOUNDS(${rank}$)
    INTEGER(KIND=JPIM) :: REAL_UBOUNDS(${rank}$)

    REAL_LBOUNDS=LBOUNDS
    REAL_UBOUNDS=UBOUNDS
    REAL_UBOUNDS(${rank}$) = OMP_GET_MAX_THREADS()

    ! By default we allocate thread-local temporaries
    SELF%THREAD_BUFFER = .TRUE.

    SELF%LAST_CONTIGUOUS_DIMENSION = ${rank}$

    IF (PRESENT(PERSISTENT)) THEN
      IF (PERSISTENT) THEN
        SELF%THREAD_BUFFER = .FALSE.
        REAL_LBOUNDS(${rank}$) = 1
	REAL_UBOUNDS(${rank}$) = UBOUNDS(${rank}$)
      END IF
    END IF

    ALLOCATE(SELF%PTR(${','.join('REAL_LBOUNDS(%d):REAL_UBOUNDS(%d)'%(r+1,r+1) for r in range(rank))}$))
    SELF%ISTATUS = NHSTFRESH
  END SUBROUTINE ${field_type_name}$_ALLOCATE

  FUNCTION ${field_type_name}$_GET_VIEW(SELF, BLOCK_INDEX, ZERO) RESULT(VIEW_PTR)
    CLASS(${field_type_name}$) :: SELF
    ${dtype}$, POINTER :: VIEW_PTR(${shapes[rank-1]}$)
    INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
    LOGICAL, OPTIONAL, INTENT(IN) :: ZERO
    INTEGER(KIND=JPIM) :: IDX
    INTEGER(KIND=JPIM) :: LBOUNDS(${rank}$)

    IDX = BLOCK_INDEX
    IF (SELF%THREAD_BUFFER) IDX = OMP_GET_THREAD_NUM()

    LBOUNDS=LBOUND(SELF%PTR)
    VIEW_PTR(${','.join('LBOUNDS(%d):'%(r+1) for r in range(rank-1))}$) => SELF%PTR(${','.join(':' for _ in range(rank-1))}$,IDX)

    IF (PRESENT(ZERO)) THEN
      IF (ZERO) VIEW_PTR(${shapes[rank-1]}$) = ${default}$
    END IF
  END FUNCTION ${field_type_name}$_GET_VIEW

  SUBROUTINE ${field_type_name}$_DELETE_DEVICE(SELF)
    ! Delete the copy of this field on GPU device
    CLASS(${field_type_name}$) :: SELF

    IF (ASSOCIATED (SELF%DEVPTR)) THEN
#ifdef _OPENACC
      !$acc exit data delete (SELF%DEVPTR)
      DEALLOCATE (SELF%DEVPTR)
#endif /* _OPENACC */
      NULLIFY (SELF%DEVPTR)
    ENDIF
  END SUBROUTINE ${field_type_name}$_DELETE_DEVICE

  SUBROUTINE ${field_type_name}$_FINAL(SELF)
    ! Finalizes field and deallocates owned data
    CLASS(${field_type_name}$) :: SELF
    NULLIFY(SELF%PTR)
    CALL SELF%DELETE_DEVICE()
  END SUBROUTINE ${field_type_name}$_FINAL

  SUBROUTINE ${field_type_name}$_WRAPPER_FINAL(SELF)
    ! Finalizes field and deallocates owned data
    CLASS(${field_type_name}$_WRAPPER) :: SELF
    ${dtype}$, POINTER :: PTR(${shapes[rank]}$)
    CALL SELF%GET_HOST_DATA_RDONLY(PTR)
    CALL SELF%${field_type_name}$_FINAL
  END SUBROUTINE ${field_type_name}$_WRAPPER_FINAL

  SUBROUTINE ${field_type_name}$_OWNER_FINAL(SELF)
    ! Finalizes field and deallocates owned data
    CLASS(${field_type_name}$_OWNER) :: SELF
    IF (ASSOCIATED(SELF%PTR)) THEN
      DEALLOCATE(SELF%PTR)
    END IF
    CALL SELF%${field_type_name}$_FINAL
  END SUBROUTINE ${field_type_name}$_OWNER_FINAL

  SUBROUTINE ${field_type_name}$_COPY (SELF, KDIR)
  CLASS(${field_type_name}$) :: SELF
  INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
  REAL :: START, FINISH
#ifdef _OPENACC

  SELF%LAST_CONTIGUOUS_DIMENSION = ${field_type_name}$_GET_LAST_CONTIGUOUS_DIMENSION (SELF%PTR)

  CALL CPU_TIME(START)
  SELECT CASE (SELF%LAST_CONTIGUOUS_DIMENSION)
#:for d in range (rank + 1)
    CASE (${d}$)
      CALL COPY_DIM${d}$_CONTIGUOUS (SELF%PTR, SELF%DEVPTR, KDIR)
#:endfor
  END SELECT
  CALL CPU_TIME(FINISH)
  IF (KDIR == NH2D) THEN
    CALL SELF%STATS%INC_CPU_TO_GPU_TRANSFER(START, FINISH)
  ELSE IF (KDIR == ND2H) THEN
    CALL SELF%STATS%INC_GPU_TO_CPU_TRANSFER(START, FINISH)
  END IF

  CONTAINS

#:for d in range (0, rank+1)
    SUBROUTINE COPY_DIM${d}$_CONTIGUOUS (HST, DEV, KDIR)
    USE OPENACC
    ${dtype}$, POINTER :: HST (${shapes[rank]}$), DEV (${shapes[rank]}$)
    INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
    INTEGER (KIND=JPIM) :: ISIZE
    INTEGER :: ${', '.join (['J'] + list (map (lambda i: 'J' + str (i+1), range (d, rank))))}$

  #:for e in range (rank, d, -1)
    ${'  ' * (rank - e)}$DO J${e}$ = LBOUND (HST, ${e}$), UBOUND (HST, ${e}$)
  #:endfor
  #:set ar = ', '.join ([':'] * d  + list (map (lambda i: 'J' + str (i+1), range (d, rank))))
  #:set indent = '  ' * (rank - e)
    #:if d == 0
    ${indent}$  ISIZE = KIND (HST)
    #:else
    ${indent}$  ISIZE = KIND (HST) * SIZE (HST (${ar}$))
    #:endif
    ${indent}$  IF (KDIR == NH2D) THEN
    ${indent}$    !$acc host_data use_device (DEV)
    ${indent}$    CALL ACC_MEMCPY_TO_DEVICE (DEV (${ar}$), HST (${ar}$), ISIZE)
    ${indent}$    !$acc end host_data
    ${indent}$  ELSEIF (KDIR == ND2H) THEN
    ${indent}$    !$acc host_data use_device (DEV)
    ${indent}$    CALL ACC_MEMCPY_FROM_DEVICE (HST (${ar}$), DEV (${ar}$), ISIZE)
    ${indent}$    !$acc end host_data
    ${indent}$  ENDIF
  #:for e in range (d, rank)
    ${'  ' * (rank - e - 1)}$ENDDO
  #:endfor
    END SUBROUTINE

#:endfor
#endif /* _OPENACC */
  END SUBROUTINE ${field_type_name}$_COPY


  SUBROUTINE ${field_type_name}$_GET_HOST_DATA (SELF, MODE, PTR)
    CLASS(${field_type_name}$), INTENT (INOUT) :: SELF
    INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
    ${dtype}$, POINTER, INTENT(INOUT) :: PTR(${shapes[rank]}$)
    INTEGER(KIND=JPIM) :: LBOUNDS(${rank}$)

    LBOUNDS=LBOUND(SELF%PTR)
    IF (IAND (SELF%ISTATUS, NHSTFRESH) == 0) THEN
#ifdef _OPENACC
      CALL SELF%COPY (ND2H)
#endif /* _OPENACC */
      SELF%ISTATUS = IOR (SELF%ISTATUS, NHSTFRESH)
    ENDIF
    PTR (${lbptr (rank)}$) => SELF%PTR (${','.join(':' for _ in range(rank))}$)
    IF (IAND (MODE, NWR) /= 0) THEN
      SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NDEVFRESH))
    ENDIF

  END SUBROUTINE ${field_type_name}$_GET_HOST_DATA

  SUBROUTINE ${field_type_name}$_GET_HOST_DATA_RDONLY (SELF, PPTR)
    CLASS(${field_type_name}$), INTENT (INOUT) :: SELF
    ${dtype}$, POINTER, INTENT(INOUT) :: PPTR(${shapes[rank]}$)

    CALL ${field_type_name}$_GET_HOST_DATA (SELF, NRD, PPTR)

  END SUBROUTINE ${field_type_name}$_GET_HOST_DATA_RDONLY

  SUBROUTINE ${field_type_name}$_SYNC_HOST_RDONLY (SELF)
    CLASS(${field_type_name}$), INTENT (INOUT) :: SELF
    ${dtype}$, POINTER :: ZPTR(${shapes[rank]}$)

    CALL SELF%GET_HOST_DATA_RDONLY (ZPTR)

  END SUBROUTINE ${field_type_name}$_SYNC_HOST_RDONLY

  SUBROUTINE ${field_type_name}$_GET_HOST_DATA_RDWR (SELF, PPTR)
    CLASS(${field_type_name}$), INTENT (INOUT) :: SELF
    ${dtype}$, POINTER, INTENT(INOUT) :: PPTR(${shapes[rank]}$)

    CALL ${field_type_name}$_GET_HOST_DATA (SELF, IOR (NRD, NWR), PPTR) 

  END SUBROUTINE ${field_type_name}$_GET_HOST_DATA_RDWR

  SUBROUTINE ${field_type_name}$_SYNC_HOST_RDWR (SELF)
    CLASS(${field_type_name}$), INTENT (INOUT) :: SELF
    ${dtype}$, POINTER :: ZPTR(${shapes[rank]}$)

    CALL SELF%GET_HOST_DATA_RDWR (ZPTR) 

  END SUBROUTINE ${field_type_name}$_SYNC_HOST_RDWR

  SUBROUTINE ${field_type_name}$_GET_DEVICE_DATA (SELF, MODE, PTR)
    CLASS(${field_type_name}$), INTENT (INOUT) :: SELF
    INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
    ${dtype}$, POINTER, INTENT(INOUT) :: PTR(${shapes[rank]}$)
    INTEGER(KIND=JPIM) :: LBOUNDS(${rank}$)

    LBOUNDS=LBOUND(SELF%PTR)
    IF (IAND (SELF%ISTATUS, NDEVFRESH) == 0) THEN
#ifdef _OPENACC
      IF (.NOT. ASSOCIATED (SELF%DEVPTR)) THEN
        ALLOCATE (SELF%DEVPTR, MOLD=SELF%PTR)
        !$acc enter data create (SELF%DEVPTR)
      ENDIF
      CALL SELF%COPY (NH2D)
#else
      SELF%DEVPTR => SELF%PTR
#endif /* _OPENACC */
      SELF%ISTATUS = IOR (SELF%ISTATUS, NDEVFRESH)
    ENDIF
    PTR (${lbptr (rank)}$) => SELF%DEVPTR (${','.join(':' for _ in range(rank))}$)
    IF (IAND (MODE, NWR) /= 0) THEN
      SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NHSTFRESH))
    ENDIF

  END SUBROUTINE ${field_type_name}$_GET_DEVICE_DATA

  SUBROUTINE ${field_type_name}$_GET_DEVICE_DATA_RDONLY (SELF, PPTR)
    CLASS(${field_type_name}$), INTENT (INOUT) :: SELF
    ${dtype}$, POINTER, INTENT(INOUT) :: PPTR(${shapes[rank]}$)

    CALL ${field_type_name}$_GET_DEVICE_DATA (SELF, NRD, PPTR)

  END SUBROUTINE ${field_type_name}$_GET_DEVICE_DATA_RDONLY

  SUBROUTINE ${field_type_name}$_SYNC_DEVICE_RDONLY (SELF)
    CLASS(${field_type_name}$), INTENT (INOUT) :: SELF
    ${dtype}$, POINTER :: ZPTR(${shapes[rank]}$)

    CALL SELF%GET_DEVICE_DATA_RDONLY (ZPTR)

  END SUBROUTINE ${field_type_name}$_SYNC_DEVICE_RDONLY

  SUBROUTINE ${field_type_name}$_GET_DEVICE_DATA_RDWR (SELF, PPTR)
    CLASS(${field_type_name}$), INTENT (INOUT) :: SELF
    ${dtype}$, POINTER, INTENT(INOUT) :: PPTR(${shapes[rank]}$)

    CALL ${field_type_name}$_GET_DEVICE_DATA (SELF, IOR (NRD, NWR), PPTR)

  END SUBROUTINE ${field_type_name}$_GET_DEVICE_DATA_RDWR

  SUBROUTINE ${field_type_name}$_SYNC_DEVICE_RDWR (SELF)
    CLASS(${field_type_name}$), INTENT (INOUT) :: SELF
    ${dtype}$, POINTER :: ZPTR(${shapes[rank]}$)

    CALL SELF%GET_DEVICE_DATA_RDWR (ZPTR)

  END SUBROUTINE ${field_type_name}$_SYNC_DEVICE_RDWR

#:endfor

  SUBROUTINE INC_CPU_TO_GPU_TRANSFER(SELF, START, FINISH)
    CLASS(GPU_STATS), INTENT(INOUT) :: SELF
    REAL, INTENT(IN) :: START, FINISH
    SELF%TRANSFER_CPU_TO_GPU = SELF%TRANSFER_CPU_TO_GPU + 1
    SELF%TOTAL_TIME_TRANSFER_CPU_TO_GPU = SELF%TOTAL_TIME_TRANSFER_CPU_TO_GPU + FINISH - START
  END SUBROUTINE

  SUBROUTINE INC_GPU_TO_CPU_TRANSFER(SELF, START, FINISH)
    CLASS(GPU_STATS), INTENT(INOUT) :: SELF
    REAL, INTENT(IN) :: START, FINISH
    SELF%TRANSFER_GPU_TO_CPU = SELF%TRANSFER_GPU_TO_CPU + 1
    SELF%TOTAL_TIME_TRANSFER_GPU_TO_CPU = SELF%TOTAL_TIME_TRANSFER_GPU_TO_CPU + FINISH - START
  END SUBROUTINE


!
! HELPERS
!

#:for dtype, suffix, rank, default in field_descriptors
#:set field_type_name = 'FIELD_%s%sD' % (suffix, rank)
  INTEGER (KIND=JPIM) FUNCTION ${field_type_name}$_GET_LAST_CONTIGUOUS_DIMENSION (PTR) RESULT (JDIM)
  ${dtype}$, POINTER :: PTR (${shapes[rank]}$)
  INTEGER*8 :: ISTRIDE (${rank}$)
  INTEGER (KIND=JPIM) :: J

  ISTRIDE (1) = KIND (PTR)
  DO J = 2, ${rank}$
    ISTRIDE (J) = ISTRIDE (J-1) * SIZE (PTR, J-1)
  ENDDO

  JDIM = 0
#:for d in range (1, rank+1)
  #:set ind0 = ['1'] * rank
  #:set ind1 = ['1'] * (d - 1) + ['2'] + ['1'] * (rank - d)
  IF (LOC (PTR (${', '.join (ind1)}$)) - LOC (PTR (${', '.join (ind0)}$)) /= ISTRIDE (${d}$)) THEN
    RETURN
  ENDIF

  JDIM = ${d}$

#:endfor
  END FUNCTION ${field_type_name}$_GET_LAST_CONTIGUOUS_DIMENSION
#:endfor

END MODULE FIELD_MODULE_DEF
