MODULE YOMCFU_TYPE

USE PARKIND1  ,ONLY : JPIM, JPRB
USE YOMHOOK   ,ONLY : LHOOK, DR_HOOK

USE TYPE_FLUXES, ONLY : FLUXES_DESCRIPTOR
USE PTRGFU, ONLY : TCFUPTR
USE FIELD_MODULE
USE FIELD_REGISTRY_MOD

IMPLICIT NONE

SAVE

#:include "ptrgfu_list.hypp"

!     ------------------------------------------------------------

!*    Contains variables to control activation of cumulated fluxes.

INTEGER(KIND=JPIM), PARAMETER :: JPFUST=40    ! maximum number of timesteps where CFU can be activated

TYPE :: TCFU_KEYS

LOGICAL :: LCUMFU  = .FALSE.                  ! controls switch on/off all CFU
LOGICAL :: LSTRD   = .FALSE.                  ! activates gravity wave drag momentum CFU if .T.
LOGICAL :: LSTRC   = .FALSE.                  ! activates contribution of convection to U, V, q and (cp T) CFU if .T.
LOGICAL :: LSTRT   = .FALSE.                  ! activates contribution of turbulence to U, V, q and (cp T) CFU if .T.
LOGICAL :: LFPLC   = .FALSE.                  ! activates convective precipitation CFU if .T.
LOGICAL :: LFPLCG  = .FALSE.                  ! activates convective graupels CFU if .T.
LOGICAL :: LFPLCH  = .FALSE.                  ! activates convective hail CFU if .T.
LOGICAL :: LFPLS   = .FALSE.                  ! activates stratiform precipitation CFU if .T.
LOGICAL :: LFPLSG  = .FALSE.                  ! activates stratiform graupels CFU if .T.
LOGICAL :: LFPLSH  = .FALSE.                  ! activates stratiform hail CFU if .T.
LOGICAL :: LFR     = .FALSE.                  ! activates radiation CFU if .T.
LOGICAL :: LAMIP   = .FALSE.                  ! activates AMIP output if .T.
LOGICAL :: LRAYS   = .FALSE.                  ! activates more radiative CFU if .T.
LOGICAL :: LRAYD   = .FALSE.                  ! activates downwards surface radiative CFU if .T.
LOGICAL :: LNEBTT  = .FALSE.                  ! activates total cloudiness CFU if .T.
LOGICAL :: LFSF    = .FALSE.                  ! activates surface CFU if .T.
LOGICAL :: LFSOIL  = .FALSE.                  ! activates soil CFU if .T.
LOGICAL :: LNEBPAR = .FALSE.                  ! activates partial cloudiness CFU if .T.
LOGICAL :: LTSTRD  = .FALSE.                  ! activates gravity wave drag momentum CFU at all levels if .T.
LOGICAL :: LTSTRC  = .FALSE.                  ! activates contribution of convection to U, V, q and (cp T) CFU at all levels if .T.
LOGICAL :: LTSTRT  = .FALSE.                  ! activates contribution of turbulence to U, V, q and (cp T) CFU at all levels if .T.
LOGICAL :: LTFPLC  = .FALSE.                  ! activates convective precipitation CFU at all levels if .T.
LOGICAL :: LTFPLS  = .FALSE.                  ! activates stratiform precipitation CFU at all levels if .T.
LOGICAL :: LTFR    = .FALSE.                  ! activates radiation CFU at all levels if .T.
LOGICAL :: LTNEB   = .FALSE.                  ! activates cloudiness CFU at all levels if .T.
LOGICAL :: LFDUTP  = .FALSE.                  ! activates filtered duration of total precipitations CFU if .T.
LOGICAL :: LMOON   = .FALSE.                  ! activates moon radiation CFU if .T.
LOGICAL :: LFRRC   = .FALSE.                  ! activates clear sky radiation calculation if .T.
LOGICAL :: LFLASH  = .FALSE.                  ! activates diagnostics of lightning

END TYPE TCFU_KEYS

TYPE, EXTENDS(TCFU_KEYS) :: TCFU

INTEGER(KIND=JPIM) :: NCFUTS(0:JPFUST)        ! array containing flux accumulation write-up steps
INTEGER(KIND=JPIM) :: NFRRC                   ! frequency for clear sky radiation calculation
INTEGER(KIND=JPIM) :: NFRCFU                  ! frequency of write up of flux diagnostics
INTEGER(KIND=JPIM) :: NFDCFU                  ! total number of fields in buffer
INTEGER(KIND=JPIM) :: NTYPCFU                 ! number of fluxes types in buffer
INTEGER(KIND=JPIM) :: NMTFLASH                ! method used to compute lightening density
REAL(KIND=JPRB) :: CALFLASH1,CALFLASH2        ! calibration factor for lightening density


LOGICAL :: LREACFU = .FALSE.                  ! read first input on historic file if .T.

TYPE(FLUXES_DESCRIPTOR), ALLOCATABLE :: TYPE_CFU(:)  ! contains the fluxes descriptor for the CFU

TYPE(TCFUPTR) :: YCFUPT

REAL (KIND=JPRB), POINTER :: CFUBUF_B (:,:,:)   => NULL () ! Buffer for cumulative diagnostics

#:for var in cfu_list 
! ${var[COMM]}$
REAL (KIND=JPRB), POINTER :: ${var[NAME]}$ (${','.join ([':'] * var[DIMS])}$) => NULL ()
CLASS (FIELD_RB${var[DIMS]+1}$D), POINTER :: F_${var[NAME]}$ => NULL ()
TYPE (FLUXES_DESCRIPTOR) :: Y${var[NAME]}$

#:endfor

CONTAINS
  PROCEDURE :: UPDATE_VIEW => TCFU_TYPE_UPDATE_VIEW
  PROCEDURE :: FINAL => TCFU_TYPE_FINAL
  PROCEDURE :: DIFF => TCFU_TYPE_DIFF
END TYPE TCFU

CONTAINS

SUBROUTINE TCFU_TYPE_DIFF (SELF, OTHER)

USE UTIL_FIELD_MOD

CLASS (TCFU), INTENT (INOUT) :: SELF, OTHER

#:for var in cfu_list 
IF (ASSOCIATED (SELF%F_${var[NAME]}$)) CALL DIFF ("TCFU%${var[NAME]}$", SELF%F_${var[NAME]}$, OTHER%F_${var[NAME]}$)
#:endfor

END SUBROUTINE TCFU_TYPE_DIFF

SUBROUTINE TCFU_TYPE_UPDATE_VIEW (SELF, BLOCK_INDEX)

CLASS (TCFU), INTENT (INOUT) :: SELF
INTEGER (KIND=JPIM), INTENT (IN) :: BLOCK_INDEX

REAL (KIND=JPRB) :: ZHOOK_HANDLE

IF (LHOOK) CALL DR_HOOK('TCFU_TYPE_UPDATE_VIEW', 0, ZHOOK_HANDLE)

#:for var in cfu_list 
IF (ASSOCIATED (SELF%F_${var[NAME]}$)) THEN
  SELF%${var[NAME]}$ => SELF%F_${var[NAME]}$%GET_VIEW (BLOCK_INDEX)
ENDIF

#:endfor

IF (LHOOK) CALL DR_HOOK('TCFU_TYPE_UPDATE_VIEW', 1, ZHOOK_HANDLE)

END SUBROUTINE TCFU_TYPE_UPDATE_VIEW

SUBROUTINE TCFU_TYPE_FINAL (SELF)

CLASS (TCFU), INTENT (INOUT) :: SELF

REAL (KIND=JPRB) :: ZHOOK_HANDLE

IF (LHOOK) CALL DR_HOOK('TCFU_TYPE_FINAL', 0, ZHOOK_HANDLE)

#:for var in cfu_list 
IF (ASSOCIATED (SELF%F_${var[NAME]}$)) THEN
  CALL DELETE_TEMPORARY (SELF%F_${var[NAME]}$)
  SELF%F_${var[NAME]}$ => NULL () 
  SELF%${var[NAME]}$ => NULL ()
ENDIF

#:endfor

IF (LHOOK) CALL DR_HOOK('TCFU_TYPE_FINAL', 1, ZHOOK_HANDLE)

END SUBROUTINE TCFU_TYPE_FINAL

END MODULE YOMCFU_TYPE
