#:set ranks  = [2, 3, 4]
#:set shapes = ['', ':', ':,:', ':,:,:', ':,:,:,:', ':,:,:,:,:']
#:set config_file = os.path.dirname(_THIS_FILE_) + '/surface_fields_config.yaml'
#:set config = field_config.VariableConfiguration(config_file)
#:set prognostic = [field_config.VariableGroup(**group) for group in config.schema['prognostic']]

MODULE SURFACE_VIEWS_PROGNOSTIC_MODULE
  ! The SURFACE_VIEWS type contains namespaced access to groups of
  ! array pointers according to individual surface variable groups.
  !
  !
  ! Variable naming conventions
  ! ---------------------------
  ! The top-level type `SURFACE_VIEWS_TYPE` holds multiple group
  ! types, each prefixed with `GSP_` for prognostic and `GSD_` for
  ! diagnostic variable groups.
  !
  ! Each group type holds a list of array views (pointers to
  ! sub-sections of the gobal array), each prefixed with `P` to
  ! indicate a thread-local view pointer. Data views of prognostic
  ! variables have an additional suffix that indicates the time index
  ! (eg.  `_T0`, `_T1` or `_T9`). The backend storage for each of
  ! these view pointers is provided by `FIELD_RB2D/FIELD_RB3D` objects, a
  ! reference to which is also stored on the group types and prefixed
  ! with `F_`.

USE PARKIND1, ONLY: JPIM, JPRB
USE FIELD_MODULE, ONLY: FIELD_RB2D, FIELD_RB3D, FIELD_RB4D
! Using global imports here, since fypp notation breaks cmake's dependency analysis
USE SURFACE_VARIABLES_MOD
USE YOMDYN, ONLY : TDYN

IMPLICIT NONE

#:for group in prognostic
TYPE SURFACE_VIEW_GROUP_${group.name}$
#:for v in group.variables
#:set shape = shapes[group.dimension] if v.array else shapes[group.dimension-1]
  REAL(KIND=JPRB), POINTER :: ${'P%s_T0(%s)' % (v.name, shape)}$   ! ${v.comment}$
  REAL(KIND=JPRB), POINTER :: ${'P%s_T1(%s)' % (v.name, shape)}$   ! ${v.comment}$
  REAL(KIND=JPRB), POINTER :: ${'P%s_T9(%s)' % (v.name, shape)}$   ! ${v.comment}$
  #:if v.array
  #:else
    #:if group.dimension == 2
!>REAL(KIND=JPRB)          :: P${v.name}$_T0 (YDCPG_OPTS%KLON)
!>REAL(KIND=JPRB)          :: P${v.name}$_T1 (YDCPG_OPTS%KLON)
!>REAL(KIND=JPRB)          :: P${v.name}$_T9 (YDCPG_OPTS%KLON)
    #:elif group.dimension == 3
!>REAL(KIND=JPRB)          :: P${v.name}$_T0 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_${group.short}$D%NLEVS)
!>REAL(KIND=JPRB)          :: P${v.name}$_T1 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_${group.short}$D%NLEVS)
!>REAL(KIND=JPRB)          :: P${v.name}$_T9 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_${group.short}$D%NLEVS)
    #:endif
  #:endif
#:endfor
#:set shape = shapes[group.dimension-1]
  REAL(KIND=JPRB), POINTER :: PGROUP(:,${shape}$)

  TYPE(SURFACE_VARIABLE_GROUP_${group.name}$), POINTER :: VARIABLE_GROUP
#:for v in group.variables
  CLASS(FIELD_RB${group.dimension}$D), POINTER :: F_${v.name}$_T0=>NULL(), F_${v.name}$_T1=>NULL(), F_${v.name}$_T9=>NULL()
#:endfor
  CLASS(FIELD_RB${group.dimension+1}$D), POINTER :: F_GROUP => NULL ()

CONTAINS
  PROCEDURE :: INIT => SURFACE_VIEW_GROUP_${group.name}$_INIT
  PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_${group.name}$_UPDATE_VIEW
  PROCEDURE :: SET9TO0 => SURFACE_VIEW_GROUP_${group.name}$_SET9TO0
  PROCEDURE :: SET1TO9 => SURFACE_VIEW_GROUP_${group.name}$_SET1TO9
  PROCEDURE :: SET1TO0 => SURFACE_VIEW_GROUP_${group.name}$_SET1TO0
  PROCEDURE :: SET0TO1 => SURFACE_VIEW_GROUP_${group.name}$_SET0TO1
  PROCEDURE :: PHTFILT => SURFACE_VIEW_GROUP_${group.name}$_PHTFILT
END TYPE SURFACE_VIEW_GROUP_${group.name}$

#:endfor

CONTAINS

#:for group in prognostic
  SUBROUTINE SURFACE_VIEW_GROUP_${group.name}$_INIT(SELF, VARIABLE_GROUP)
    ! Constructor of the array view type for a surface variable group
    CLASS(SURFACE_VIEW_GROUP_${group.name}$) :: SELF
    TYPE(SURFACE_VARIABLE_GROUP_${group.name}$), TARGET, INTENT(INOUT) :: VARIABLE_GROUP

    ! Create a view per timestep field for each prognostic variable
#:for v in group.variables
    SELF%F_${v.name}$_T0 => VARIABLE_GROUP%V${v.name}$%FT0
    SELF%F_${v.name}$_T1 => VARIABLE_GROUP%V${v.name}$%FT1
    SELF%F_${v.name}$_T9 => VARIABLE_GROUP%V${v.name}$%FT9
#:endfor
    SELF%VARIABLE_GROUP => VARIABLE_GROUP
    SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
  END SUBROUTINE SURFACE_VIEW_GROUP_${group.name}$_INIT

  SUBROUTINE SURFACE_VIEW_GROUP_${group.name}$_UPDATE_VIEW(SELF, BLOCK_INDEX)
    ! Extract local array views from field objects
    CLASS(SURFACE_VIEW_GROUP_${group.name}$) :: SELF
    INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX

    ! Set up the view pointer for each timestep field
#:for v in group.variables
    IF (ASSOCIATED (SELF%F_${v.name}$_T0)) SELF%P${v.name}$_T0 => SELF%F_${v.name}$_T0%GET_VIEW(BLOCK_INDEX)
    IF (ASSOCIATED (SELF%F_${v.name}$_T1)) SELF%P${v.name}$_T1 => SELF%F_${v.name}$_T1%GET_VIEW(BLOCK_INDEX)
    IF (ASSOCIATED (SELF%F_${v.name}$_T9)) SELF%P${v.name}$_T9 => SELF%F_${v.name}$_T9%GET_VIEW(BLOCK_INDEX)
#:endfor

    IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
  END SUBROUTINE SURFACE_VIEW_GROUP_${group.name}$_UPDATE_VIEW

#:endfor


  ! Timestepping utility subroutines for prognostics variables
#:for group in prognostic
  SUBROUTINE SURFACE_VIEW_GROUP_${group.name}$_SET9TO0(SELF)
    ! Field update operation for timestepping schemes
    CLASS(SURFACE_VIEW_GROUP_${group.name}$) :: SELF

#:for v in group.variables
#:set shape = shapes[group.dimension-1]
    IF (SELF%VARIABLE_GROUP%V${v.name}$%LACTIVE) THEN
      SELF%${'P%s_T9(%s)' % (v.name, shape)}$ = SELF%${'P%s_T0(%s)' % (v.name, shape)}$
    END IF
#:endfor
  END SUBROUTINE SURFACE_VIEW_GROUP_${group.name}$_SET9TO0

  SUBROUTINE SURFACE_VIEW_GROUP_${group.name}$_SET1TO9(SELF)
    ! Field update operation for timestepping schemes
    CLASS(SURFACE_VIEW_GROUP_${group.name}$) :: SELF

#:for v in group.variables
    IF (SELF%VARIABLE_GROUP%V${v.name}$%LACTIVE) THEN
      SELF%${'P%s_T1(%s)' % (v.name, shape)}$ = SELF%${'P%s_T9(%s)' % (v.name, shape)}$
    END IF
#:endfor
  END SUBROUTINE SURFACE_VIEW_GROUP_${group.name}$_SET1TO9

  SUBROUTINE SURFACE_VIEW_GROUP_${group.name}$_SET1TO0(SELF)
    ! Field update operation for timestepping schemes
    CLASS(SURFACE_VIEW_GROUP_${group.name}$) :: SELF

#:for v in group.variables
    IF (SELF%VARIABLE_GROUP%V${v.name}$%LACTIVE) THEN
      SELF%${'P%s_T1(%s)' % (v.name, shape)}$ = SELF%${'P%s_T0(%s)' % (v.name, shape)}$
    END IF
#:endfor
  END SUBROUTINE SURFACE_VIEW_GROUP_${group.name}$_SET1TO0

  SUBROUTINE SURFACE_VIEW_GROUP_${group.name}$_SET0TO1(SELF)
    ! Field update operation for timestepping schemes
    CLASS(SURFACE_VIEW_GROUP_${group.name}$) :: SELF

#:for v in group.variables
    IF (SELF%VARIABLE_GROUP%V${v.name}$%LACTIVE) THEN
      SELF%${'P%s_T0(%s)' % (v.name, shape)}$ = SELF%${'P%s_T1(%s)' % (v.name, shape)}$
    END IF
#:endfor
  END SUBROUTINE SURFACE_VIEW_GROUP_${group.name}$_SET0TO1

  SUBROUTINE SURFACE_VIEW_GROUP_${group.name}$_PHTFILT(SELF, YDDYN)
    CLASS(SURFACE_VIEW_GROUP_${group.name}$) :: SELF
    TYPE(TDYN), INTENT(IN) :: YDDYN
    REAL(KIND=JPRB) :: REPSP1, ZZPHY

    REPSP1 = YDDYN%REPSP1
    ZZPHY = 1.0_JPRB - REPSP1

#:for v in group.variables
#:set shape = shapes[group.dimension-1]
    IF (SELF%VARIABLE_GROUP%V${v.name}$%LACTIVE) THEN
      SELF%${'P%s_T9(%s)' % (v.name, shape)}$ = REPSP1*SELF%${'P%s_T1(%s)' % (v.name, shape)}$ &
       &                                      + ZZPHY*SELF%${'P%s_T0(%s)' % (v.name, shape)}$
      SELF%${'P%s_T0(%s)' % (v.name, shape)}$ = SELF%${'P%s_T1(%s)' % (v.name, shape)}$
    END IF
#:endfor
  END SUBROUTINE SURFACE_VIEW_GROUP_${group.name}$_PHTFILT

#:endfor

END MODULE SURFACE_VIEWS_PROGNOSTIC_MODULE



