MODULE YOMXFU_TYPE

USE PARKIND1  ,ONLY : JPIM, JPRB
USE YOMHOOK   ,ONLY : LHOOK, DR_HOOK

USE TYPE_FLUXES, ONLY : FLUXES_DESCRIPTOR
USE PTRXFU, ONLY : TXFUPTR
USE FIELD_MODULE
USE FIELD_REGISTRY_MOD

IMPLICIT NONE

SAVE

#:include "ptrxfu_list.hypp"

!     ------------------------------------------------------------

!*    Contains variables to control activation of instantaneous fluxes.

INTEGER(KIND=JPIM), PARAMETER :: JPFUXT=250  ! maximum number of timesteps where XFU can be activated

TYPE :: TXFU_KEYS

LOGICAL :: LXFU=.FALSE.                      ! controls switch on/off all XFU
LOGICAL :: LXTRD=.FALSE.                     ! activates gravity wave drag momentum XFU if .T.
LOGICAL :: LXTRC=.FALSE.                     ! activates contribution of convection to U, V, q and (cp T) XFU if .T.
LOGICAL :: LXTRT=.FALSE.                     ! activates contribution of turbulence to U, V, q and (cp T) XFU if .T.
LOGICAL :: LXPLC=.FALSE.                     ! activates convective precipitation XFU if .T.
LOGICAL :: LXPLCG=.FALSE.                    ! activates convective graupels CFU if .T.
LOGICAL :: LXPLCH=.FALSE.                    ! activates convective hail CFU if .T.
LOGICAL :: LXPLS=.FALSE.                     ! activates stratiform precipitation XFU if .T.
LOGICAL :: LXPLSG=.FALSE.                    ! activates stratiform graupels CFU if .T.
LOGICAL :: LXPLSH=.FALSE.                    ! activates stratiform hail CFU if .T.
LOGICAL :: LXR=.FALSE.                       ! activates radiation XFU if .T.
LOGICAL :: LXNEBTT=.FALSE.                   ! activates total cloudiness XFU if .T.
LOGICAL :: LXNEBPA=.FALSE.                   ! activates partial cloudiness XFU if .T.
LOGICAL :: LXCLS=.FALSE.                     ! activates U, V, T, q and relative humidity at 2 or 10 m (time t-dt) if .T.
LOGICAL :: LXMWINDCLS=.FALSE.                ! activates mean of U and V at 10 m if .T., also NU/NV if LXNUVCLS
LOGICAL :: LXNUVCLS=.FALSE.                  ! activates neutral U and V at 10 m (time t-dt) if .T.
LOGICAL :: LXTTCLS=.FALSE.                   ! activates extreme temperatures at 2 m if .T.
LOGICAL :: LXHHCLS=.FALSE.                   ! activates extreme relative moistures at 2 m if .T
LOGICAL :: LXTPWCLS=.FALSE.                  ! activates T'w at 2 m if .T
LOGICAL :: LXSOIL=.FALSE.                    ! activates soil XFU if .T.
LOGICAL :: LTXTRD=.FALSE.                    ! activates gravity wave drag momentum XFU at all levels if .T.
LOGICAL :: LTXTRC=.FALSE.                    ! activates contribution of convection to U, V, q and (cp T) XFU if .T.
LOGICAL :: LTXTRT=.FALSE.                    ! activates contribution of turbulence to U, V, q and (cp T) XFU if .T.
LOGICAL :: LTXR=.FALSE.                      ! activates radiation XFU at all levels if .T.
LOGICAL :: LTXNEB=.FALSE.                    ! activates cloudiness XFU at all levels if .T.
LOGICAL :: LTXQICE=.FALSE.                   ! total ice water content at all levels
LOGICAL :: LTXQLI=.FALSE.                    ! total liquid water content at all levels
LOGICAL :: LXICV=.FALSE.                     ! activates indices of convection
                                             ! (CAPE and moisture convergence) XFU at all levels if .T.
LOGICAL :: LXCTOP=.FALSE.                    ! activates pressure of top deep convection
LOGICAL :: LXCLP=.FALSE.                     ! activates height (in meters) of PBL XFU at all levels if .T.
LOGICAL :: LXVEIN=.FALSE.                    ! activates ventilation index
LOGICAL :: LXTGST=.FALSE.                    ! activates gusts as U and V components XFU at all levels if .T.
LOGICAL :: LXXGST=.FALSE.                    ! activates extreme gusts as U and V components XFU at all levels if .T.
LOGICAL :: LXXGST2=.FALSE.                   ! activates extreme gusts2 as U and V components XFU at all levels if .T.
LOGICAL :: LXQCLS=.FALSE.                    ! activates specific moisture at 2 meters
LOGICAL :: LXTHW=.FALSE.                     ! activates "theta'_w" surface flux
LOGICAL :: LXXDIAGH=.FALSE.                  ! activates extreme value of hail diagnostic
LOGICAL :: LXMRT=.FALSE.                     ! activates mean radiant temperature
LOGICAL :: LXVISI=.FALSE.                    ! activates visibilities diagnostic
LOGICAL :: LXVISI2=.FALSE.                   ! activates visibilities diagnostic
LOGICAL :: LXPRECIPS1=.FALSE.                ! activates precipitations types nr 1 diagnostic
LOGICAL :: LXPRECIPS2=.FALSE.                ! activates precipitations types nr 2 diagnostic

END TYPE TXFU_KEYS

TYPE, EXTENDS(TXFU_KEYS) :: TXFU

TYPE(FLUXES_DESCRIPTOR), ALLOCATABLE :: TYPE_XFU(:) ! contains the fluxes descriptor for the XFU

REAL(KIND=JPRB), POINTER :: RMWINDCALC_B(:,:)  => NULL ()  ! needed for mean wind calculation
REAL(KIND=JPRB), POINTER :: RMWINDCALC(:)  => NULL () 
CLASS (FIELD_RB2D), POINTER :: F_RMWINDCALC => NULL ()

REAL(KIND=JPRB), POINTER :: RMNWINDCALC_B(:,:)  => NULL ()  ! needed for mean neutral wind calculation
REAL(KIND=JPRB), POINTER :: RMNWINDCALC(:)  => NULL () 
CLASS (FIELD_RB2D), POINTER :: F_RMNWINDCALC => NULL ()


INTEGER(KIND=JPIM) :: MEANPERIOD             ! period (in seconds) for the mean calculation
INTEGER(KIND=JPIM) :: NMEANSTEPS             ! number of timesteps involved in mean calculation
INTEGER(KIND=JPIM) :: NXGSTPERIOD            ! period for maximum gusts
INTEGER(KIND=JPIM) :: NXGSTPERIOD2           ! period for second maximum gusts
INTEGER(KIND=JPIM) :: NVISIPERIOD            ! period for visibilities
INTEGER(KIND=JPIM) :: NVISIPERIOD2           ! period for second visibilities
INTEGER(KIND=JPIM) :: NXGSTTS                ! number of timesteps involved in max gust calculation
INTEGER(KIND=JPIM) :: NTYPXFU                ! number of fluxes types in buffer
INTEGER(KIND=JPIM) :: NXFUTS(0:JPFUXT)       ! array containing flux accumulation write-up steps
INTEGER(KIND=JPIM) :: NFRXFU                 ! frequency of write up of flux diagnostics
INTEGER(KIND=JPIM) :: NRAZTS(0:JPFUXT)       ! array containing instantaneous flux reset steps
INTEGER(KIND=JPIM) :: NFRRAZ                 ! frequency of reset of flux diagnostics
INTEGER(KIND=JPIM) :: N1RAZ                  ! over-riding switch for instantaneous flux reset (0 = false)
INTEGER(KIND=JPIM) :: NFDXFU                 ! total number of fields in buffer

LOGICAL :: LRESET                            ! reset extreme temperatures to zero
LOGICAL :: LRESET_GST                        ! reset Gust calculation
LOGICAL :: LRESET_GST2                       ! reset Gust2 calculation
LOGICAL :: LRESET_PRECIP                     ! reset Precips type calcultation
LOGICAL :: LRESET_PRECIP2                    ! reset Precips type calcultation
LOGICAL :: LRESET_VISI                       ! reset visibilities calculations
LOGICAL :: LRESET_VISI2                      ! reset visibilities calculations

LOGICAL :: LREAXFU                           ! read first input on historic file if .T.

TYPE(TXFUPTR) :: YXFUPT

REAL (KIND=JPRB), POINTER :: XFUBUF_B(:,:,:)  => NULL () ! Buffer for instantaneous diagnostics

#:for var in xfu_list 
! ${var[COMM]}$
REAL (KIND=JPRB), POINTER :: ${var[NAME]}$ (${','.join ([':'] * var[DIMS])}$) => NULL ()
CLASS (FIELD_RB${var[DIMS]+1}$D), POINTER :: F_${var[NAME]}$ => NULL ()
TYPE (FLUXES_DESCRIPTOR) :: Y${var[NAME]}$

#:endfor

CONTAINS
  PROCEDURE :: UPDATE_VIEW => TXFU_TYPE_UPDATE_VIEW
  PROCEDURE :: FINAL => TXFU_TYPE_FINAL
  PROCEDURE :: DIFF => TXFU_TYPE_DIFF
END TYPE TXFU

!     ------------------------------------------------------------

CONTAINS

SUBROUTINE TXFU_TYPE_DIFF (SELF, OTHER)

USE UTIL_FIELD_MOD

CLASS (TXFU), INTENT (INOUT) :: SELF, OTHER

#:for var in xfu_list 
IF (ASSOCIATED (SELF%F_${var[NAME]}$)) CALL DIFF ("TXFU%${var[NAME]}$", SELF%F_${var[NAME]}$, OTHER%F_${var[NAME]}$)
#:endfor

END SUBROUTINE TXFU_TYPE_DIFF

SUBROUTINE TXFU_TYPE_UPDATE_VIEW (SELF, BLOCK_INDEX)

CLASS (TXFU), INTENT (INOUT) :: SELF
INTEGER (KIND=JPIM), INTENT (IN) :: BLOCK_INDEX

REAL (KIND=JPRB) :: ZHOOK_HANDLE

IF (LHOOK) CALL DR_HOOK('TXFU_TYPE_UPDATE_VIEW', 0, ZHOOK_HANDLE)

IF (ASSOCIATED (SELF%F_RMWINDCALC)) THEN
  SELF%RMWINDCALC => SELF%F_RMWINDCALC%GET_VIEW (BLOCK_INDEX)
ENDIF

IF (ASSOCIATED (SELF%F_RMNWINDCALC)) THEN
  SELF%RMNWINDCALC => SELF%F_RMNWINDCALC%GET_VIEW (BLOCK_INDEX)
ENDIF

#:for var in xfu_list 
IF (ASSOCIATED (SELF%F_${var[NAME]}$)) THEN
  SELF%${var[NAME]}$ => SELF%F_${var[NAME]}$%GET_VIEW (BLOCK_INDEX)
ENDIF

#:endfor

IF (LHOOK) CALL DR_HOOK('TXFU_TYPE_UPDATE_VIEW', 1, ZHOOK_HANDLE)

END SUBROUTINE TXFU_TYPE_UPDATE_VIEW

SUBROUTINE TXFU_TYPE_FINAL (SELF)

CLASS (TXFU), INTENT (INOUT) :: SELF

REAL (KIND=JPRB) :: ZHOOK_HANDLE

IF (LHOOK) CALL DR_HOOK('TXFU_TYPE_FINAL', 0, ZHOOK_HANDLE)

IF (ASSOCIATED (SELF%F_RMWINDCALC)) THEN
  CALL DELETE_TEMPORARY (SELF%F_RMWINDCALC)
  SELF%F_RMWINDCALC => NULL () 
  SELF%RMWINDCALC => NULL ()
ENDIF

IF (ASSOCIATED (SELF%F_RMNWINDCALC)) THEN
  CALL DELETE_TEMPORARY (SELF%F_RMNWINDCALC)
  SELF%F_RMNWINDCALC => NULL () 
  SELF%RMNWINDCALC => NULL ()
ENDIF

#:for var in xfu_list 
IF (ASSOCIATED (SELF%F_${var[NAME]}$)) THEN
  CALL DELETE_TEMPORARY (SELF%F_${var[NAME]}$)
  SELF%F_${var[NAME]}$ => NULL () 
  SELF%${var[NAME]}$ => NULL ()
ENDIF

#:endfor

IF (LHOOK) CALL DR_HOOK('TXFU_TYPE_FINAL', 1, ZHOOK_HANDLE)

END SUBROUTINE TXFU_TYPE_FINAL

END MODULE YOMXFU_TYPE
